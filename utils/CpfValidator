package com.itau.cursos.cursoscartoes.utils;

import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.InputMismatchException;

public class CpfValidator {

    public void validateArchive(MultipartFile file){
        try {
            byte[] bytes = file.getBytes();

            File f = new File("cpfs.txt");
            f.createNewFile();
            BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(f));
            stream.write(bytes);
            stream.close();

            testArchive(f);
        }
        catch (Exception e) {
    //            return "You failed to upload => ";
        }
    }

    public void testArchive(File f){
        try {
            FileReader arq = new FileReader(f);
            BufferedReader lerArq = new BufferedReader(arq);

            String linha = lerArq.readLine();
            String text = "";
            int success = 0;
            int error = 0;

            while (linha != null) {
                if(isValid(linha)) {
                    text += linha + " Válido \n";
                    success++;
                }
                else {
                    text += linha + " Inválido \n";
                    error++;
                }

                linha = lerArq.readLine(); // lê da segunda até a última linha

            }

            text += "VÁLIDOS: " + success + " - INVÁLIDOS: " + error + " TOTAL: " + (error + success);
            generateTxt(text);

            arq.close();
        } catch (IOException e) {
            System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
        }
    }

    public boolean isValid(String CPF){
//        CPF = new Long(CPF).toString();//Caso precise remover 0 a esquerda
        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals("00000000000") ||
                CPF.equals("11111111111") ||
                CPF.equals("22222222222") || CPF.equals("33333333333") ||
                CPF.equals("44444444444") || CPF.equals("55555555555") ||
                CPF.equals("66666666666") || CPF.equals("77777777777") ||
                CPF.equals("88888888888") || CPF.equals("99999999999") ||
                (CPF.length() != 11))
            return(false);

        char dig10, dig11;
        int sm, i, r, num, peso;

        // "try" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
            // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {
                // converte o i-esimo caractere do CPF em um numero:
                // por exemplo, transforma o caractere '0' no inteiro 0
                // (48 eh a posicao de '0' na tabela ASCII)
                num = (int)(CPF.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico

            // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
                num = (int)(CPF.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig11 = '0';
            else dig11 = (char)(r + 48);

            // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10)))
                return(true);
            else return(false);
        } catch (InputMismatchException erro) {
            return(false);
        }
    }

    public void generateTxt(String textoQueSeraEscrito) throws IOException {

        FileWriter arquivo;

        try {
            arquivo = new FileWriter(new File("Resultado.txt"));
            arquivo.write(textoQueSeraEscrito);
            arquivo.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
