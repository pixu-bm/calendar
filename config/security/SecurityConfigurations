package com.itau.cursos.cursoscartoes.config.security;

import com.itau.cursos.cursoscartoes.service.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@EnableWebSecurity
//@Configuration
public class SecurityConfigurations extends WebSecurityConfigurerAdapter {

    @Autowired AuthService authService;

    //Autenticação
    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(authService).passwordEncoder(new BCryptPasswordEncoder());
    }

    //Autorização
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeRequests()
                .antMatchers("/user/add").permitAll()
                .antMatchers("/user/validate/cpf/**").permitAll()
                .antMatchers("/user/upload/**").permitAll()
//                .antMatchers("/user/login").permitAll()
                .antMatchers("/css/**", "/js/**").permitAll()
            // Para qualquer requisição (anyRequest) é preciso estar
            // autenticado (authenticated).
            .anyRequest().authenticated()
            .and()
            .formLogin()
            // Aqui dizemos que temos uma página customizada.
            .loginPage("/user/login")
                .defaultSuccessUrl("/user/index",true)
            .usernameParameter("email").permitAll()
                .and().logout().logoutUrl("/user/logout")
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID");
    }
//    @Override
//    protected void configure(HttpSecurity http) throws Exception {
//        http.authorizeRequests()
//                .antMatchers("/user/*").permitAll()
//                .antMatchers("/calendar/*").permitAll()
//                .antMatchers("/workshop/*").permitAll()
//                .and().formLogin();
//    }

    //Recursos estaticos(js, css, img, etc)
//    @Override
//    public void configure(WebSecurity web) throws Exception {
//
//    }
}
