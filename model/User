package com.itau.cursos.cursoscartoes.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Document
public class User implements UserDetails {

//    private static final long serialVersionUID = 1L;

    @Id
    private String email;
    @NotNull
    private String name;
    @NotNull
    private String racf;
    @NotNull
    private String password;
    @NotNull
    private String functional;
    @NotNull
    private UserCoord coord;
    @NotNull
    private boolean isAdmin;
    private List<Profile> profiles = new ArrayList<>();

    private List<Course> courses = new ArrayList<>();
    private boolean isVerified;

    public User() {
    }

    public User(String email, String name, String racf, String password, String functional, UserCoord coord, boolean isAdmin) {
        this.email = email;
        this.name = name;
        this.racf = racf;
        this.password = password;
        this.functional = functional;
        this.courses = new ArrayList<>();
        this.coord = coord;
        this.isAdmin = isAdmin;
        this.isVerified = false;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRacf() {
        return racf;
    }

    public void setRacf(String racf) {
        this.racf = racf;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return this.profiles;
    }

    public String getPassword() {
        return this.password;
    }

    @Override
    public String getUsername() {
        return this.getEmail();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFunctional() {
        return functional;
    }

    public void setFunctional(String functional) {
        this.functional = functional;
    }

    public List<Course> getCourses() {
        return courses;
    }

    public void setCourses(List<Course> courses) {
        this.courses = courses;
    }

    public UserCoord getCoord() {
        return coord;
    }

    public void setCoord(UserCoord coord) {
        this.coord = coord;
    }

    public boolean isAdmin() {
        return isAdmin;
    }

    public void setAdmin(boolean admin) {
        isAdmin = admin;
    }

        public boolean isVerified() {
        return isVerified;
    }

    public void setVerified(boolean verified) {
        isVerified = verified;
    }
}
